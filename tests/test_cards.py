import unittest
import subprocess
import csv

class TestFlashcardProgram(unittest.TestCase):
    def test_privet_command(self):

        # test "privet" command
        result = subprocess.run(["./fcard", "privet"], capture_output=True, text=True)
        self.assertEqual(result.returncode, 0)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
        self.assertEqual(result.stdout.strip(), "Hello world!")  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–ø—É—Ç

    def test_add_command(self):
        # test "add" command
        # —Ç—É—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç, —Å–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ—Å—Ç–µ (list)

        clear_csv("flashcards.csv") # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω—É–ª—è

        result = subprocess.run(["./fcard", "add", "Front of card", "Back of card", "-t", "tag1"], capture_output=True, text=True)
        self.assertEqual(result.returncode, 0)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
        self.assertIn("Flashcard added successfully!", result.stdout)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–ø—É—Ç

        clear_csv("flashcards.csv") # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–ª–µ–¥ —Ç–µ—Å—Ç–æ–≤

    def test_list_command(self):
        # test "display" command

        # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω—É–ª—è
        clear_csv("flashcards.csv")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        subprocess.run(["./fcard", "add", "Test Front 1", "Test Back 1", "-t", "tag_text_1"], capture_output=True, text=True)
        subprocess.run(["./fcard", "add", "Test Front 2", "Test Back 2", "-t", "tag_text_2"], capture_output=True, text=True)

        expected_output = """Flashcards:
-----------------------------------
ID: 1
Front: Test Front 1
Back: Test Back 1
Tag: tag_text_1
Sucessful guesses: 0
Failed guesses: 0
-----------------------------------
ID: 2
Front: Test Front 2
Back: Test Back 2
Tag: tag_text_2
Sucessful guesses: 0
Failed guesses: 0
-----------------------------------"""
        # display all cards
        result = subprocess.run(["./fcard", "list", "-a"], capture_output=True, text=True)
        self.assertEqual(result.returncode, 0)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
        self.assertEqual(result.stdout.strip(), expected_output) # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥

        clear_csv("flashcards.csv") # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–ª–µ–¥ —Ç–µ—Å—Ç–æ–≤

    def test_remove_command_1(self):
        # test "remove" command

        # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω—É–ª—è
        clear_csv("flashcards.csv")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        subprocess.run(["./fcard", "add", "Test Front 1", "Test Back 1", "-t", "tag_text_1"], capture_output=True, text=True)
        subprocess.run(["./fcard", "add", "Test Front 2", "Test Back 2", "-t", "tag_text_2"], capture_output=True, text=True)

        # —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        result = subprocess.run(["./fcard", "remove", "1"], capture_output=True, text=True)
        self.assertEqual(result.returncode, 0)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
        self.assertIn("Flashcard removed successfully!", result.stdout)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–ø—É—Ç

        clear_csv("flashcards.csv") # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–ª–µ–¥ —Ç–µ—Å—Ç–æ–≤

    def test_remove_command_2(self):
        # test "remove" command with results in list and also with invalid ID

        # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω—É–ª—è
        clear_csv("flashcards.csv")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        subprocess.run(["./fcard", "add", "Test Front 1", "Test Back 1", "-t", "tag_text_1"], capture_output=True, text=True)
        subprocess.run(["./fcard", "add", "Test Front 2", "Test Back 2", "-t", "tag_text_2"], capture_output=True, text=True)

        # —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        result = subprocess.run(["./fcard", "remove", "3"], capture_output=True, text=True)
        self.assertEqual(result.returncode, 1)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π

        subprocess.run(["./fcard", "remove", "2"], capture_output=True, text=True)
        result = subprocess.run(["./fcard", "list", "-a"], capture_output=True, text=True)

        expected_output = """Flashcards:
-----------------------------------
ID: 1
Front: Test Front 1
Back: Test Back 1
Tag: tag_text_1
Sucessful guesses: 0
Failed guesses: 0
-----------------------------------"""

        self.assertEqual(result.returncode, 0)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
        self.assertEqual(result.stdout.strip(), expected_output) # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥

    def test_remove_command_3(self):
        # test remove command if deleting last card

        # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω—É–ª—è
        clear_csv("flashcards.csv")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        subprocess.run(["./fcard", "add", "Test Front 1", "Test Back 1", "-t", "tag_text_1"], capture_output=True, text=True)

        # —É–¥–∞–ª—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
        subprocess.run(["./fcard", "remove", "1"], capture_output=True, text=True)
        subprocess.run(["./fcard", "add", "Test Front 1", "Test Back 1", "-t", "tag_text_1"], capture_output=True, text=True)
        result = subprocess.run(["./fcard", "list", "--all"], capture_output=True, text=True)

        expected_output = """Flashcards:
-----------------------------------
ID: 1
Front: Test Front 1
Back: Test Back 1
Tag: tag_text_1
Sucessful guesses: 0
Failed guesses: 0
-----------------------------------"""

        self.assertEqual(result.stdout.strip(), expected_output) # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥
        self.assertEqual(result.returncode, 0)  # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏

        clear_csv("flashcards.csv")

    # ! –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –≤–≤–æ–¥–æ–º, –æ—Å—Ç–∞–≤–ª—è—é –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ 
    # üê≥üê≥üê≥
    """
    def test_review_all(self):
        # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω—É–ª—è
        clear_csv("flashcards.csv")

        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        subprocess.run(["./fcard", "add", "Test Front 1", "Test Back 1", "-t", "tag_text_1"], capture_output=True, text=True)
        subprocess.run(["./fcard", "add", "Test Front 2", "Test Back 2", "-t", "tag_text_2"], capture_output=True, text=True)
        
        output = subprocess.run(["./fcard", "review", "-a"], input=b"\ny\nn", capture_output=True)
        expected_output = "Test Front 1\nType anything to show answer\npress \"y\" if you got it and \"n\" if not\nGood job!\nTest Front 2\npress \"y\" if you got it and \"n\" if not\nTry to memorize it!\n--------------- You finished them all! --------------"
        self.assertEqual(output.stdout.decode().strip(), expected_output) # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥

        clear_csv("flashcards.csv")
    """

def clear_csv(file_path):
    """Clear the contents of a CSV file."""
    with open(file_path, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)

if __name__ == "__main__":
    unittest.main()

